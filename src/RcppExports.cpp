// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// RType
std::string RType(SEXP x);
RcppExport SEXP _manipulation_RType(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RType(x));
    return rcpp_result_gen;
END_RCPP
}
// countNAs
int countNAs(NumericVector x);
RcppExport SEXP _manipulation_countNAs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(countNAs(x));
    return rcpp_result_gen;
END_RCPP
}
// countZeroes
int countZeroes(Rcpp::IntegerVector x);
RcppExport SEXP _manipulation_countZeroes(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(countZeroes(x));
    return rcpp_result_gen;
END_RCPP
}
// createDF
DataFrame createDF();
RcppExport SEXP _manipulation_createDF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(createDF());
    return rcpp_result_gen;
END_RCPP
}
// createList
List createList();
RcppExport SEXP _manipulation_createList() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(createList());
    return rcpp_result_gen;
END_RCPP
}
// createVec1
NumericVector createVec1();
RcppExport SEXP _manipulation_createVec1() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(createVec1());
    return rcpp_result_gen;
END_RCPP
}
// createVec2
NumericVector createVec2();
RcppExport SEXP _manipulation_createVec2() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(createVec2());
    return rcpp_result_gen;
END_RCPP
}
// enumerate
void enumerate(NumericVector x);
RcppExport SEXP _manipulation_enumerate(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    enumerate(x);
    return R_NilValue;
END_RCPP
}
// favourites
IntegerVector favourites();
RcppExport SEXP _manipulation_favourites() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(favourites());
    return rcpp_result_gen;
END_RCPP
}
// getAlpha
NumericVector getAlpha(List x);
RcppExport SEXP _manipulation_getAlpha(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getAlpha(x));
    return rcpp_result_gen;
END_RCPP
}
// getLevels
CharacterVector getLevels(IntegerVector x);
RcppExport SEXP _manipulation_getLevels(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getLevels(x));
    return rcpp_result_gen;
END_RCPP
}
// getNonNAs
NumericVector getNonNAs(NumericVector x);
RcppExport SEXP _manipulation_getNonNAs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getNonNAs(x));
    return rcpp_result_gen;
END_RCPP
}
// getOne
double getOne(NumericVector x);
RcppExport SEXP _manipulation_getOne(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getOne(x));
    return rcpp_result_gen;
END_RCPP
}
// names1
CharacterVector names1(NumericVector x);
RcppExport SEXP _manipulation_names1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(names1(x));
    return rcpp_result_gen;
END_RCPP
}
// names2
CharacterVector names2(NumericVector x);
RcppExport SEXP _manipulation_names2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(names2(x));
    return rcpp_result_gen;
END_RCPP
}
// someFactor
IntegerVector someFactor();
RcppExport SEXP _manipulation_someFactor() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(someFactor());
    return rcpp_result_gen;
END_RCPP
}
// uninitialized
IntegerVector uninitialized(int n);
RcppExport SEXP _manipulation_uninitialized(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(uninitialized(n));
    return rcpp_result_gen;
END_RCPP
}
// vec0
Rcpp::NumericVector vec0(int n);
RcppExport SEXP _manipulation_vec0(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vec0(n));
    return rcpp_result_gen;
END_RCPP
}
// vec1
Rcpp::IntegerVector vec1(int n);
RcppExport SEXP _manipulation_vec1(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vec1(n));
    return rcpp_result_gen;
END_RCPP
}
// whatever
IntegerVector whatever(int n, int a);
RcppExport SEXP _manipulation_whatever(SEXP nSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(whatever(n, a));
    return rcpp_result_gen;
END_RCPP
}
// zeros
IntegerVector zeros(int n);
RcppExport SEXP _manipulation_zeros(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(zeros(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_manipulation_RType", (DL_FUNC) &_manipulation_RType, 1},
    {"_manipulation_countNAs", (DL_FUNC) &_manipulation_countNAs, 1},
    {"_manipulation_countZeroes", (DL_FUNC) &_manipulation_countZeroes, 1},
    {"_manipulation_createDF", (DL_FUNC) &_manipulation_createDF, 0},
    {"_manipulation_createList", (DL_FUNC) &_manipulation_createList, 0},
    {"_manipulation_createVec1", (DL_FUNC) &_manipulation_createVec1, 0},
    {"_manipulation_createVec2", (DL_FUNC) &_manipulation_createVec2, 0},
    {"_manipulation_enumerate", (DL_FUNC) &_manipulation_enumerate, 1},
    {"_manipulation_favourites", (DL_FUNC) &_manipulation_favourites, 0},
    {"_manipulation_getAlpha", (DL_FUNC) &_manipulation_getAlpha, 1},
    {"_manipulation_getLevels", (DL_FUNC) &_manipulation_getLevels, 1},
    {"_manipulation_getNonNAs", (DL_FUNC) &_manipulation_getNonNAs, 1},
    {"_manipulation_getOne", (DL_FUNC) &_manipulation_getOne, 1},
    {"_manipulation_names1", (DL_FUNC) &_manipulation_names1, 1},
    {"_manipulation_names2", (DL_FUNC) &_manipulation_names2, 1},
    {"_manipulation_someFactor", (DL_FUNC) &_manipulation_someFactor, 0},
    {"_manipulation_uninitialized", (DL_FUNC) &_manipulation_uninitialized, 1},
    {"_manipulation_vec0", (DL_FUNC) &_manipulation_vec0, 1},
    {"_manipulation_vec1", (DL_FUNC) &_manipulation_vec1, 1},
    {"_manipulation_whatever", (DL_FUNC) &_manipulation_whatever, 2},
    {"_manipulation_zeros", (DL_FUNC) &_manipulation_zeros, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_manipulation(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
